#pragma once
#include "ntbase.h"

//////////////////////////////////////////////////////////////////////////

#define SECURITY_NULL_SID_AUTHORITY         {0,0,0,0,0,0}
#define SECURITY_WORLD_SID_AUTHORITY        {0,0,0,0,0,1}
#define SECURITY_LOCAL_SID_AUTHORITY        {0,0,0,0,0,2}
#define SECURITY_CREATOR_SID_AUTHORITY      {0,0,0,0,0,3}
#define SECURITY_NON_UNIQUE_AUTHORITY       {0,0,0,0,0,4}
#define SECURITY_NT_AUTHORITY               {0,0,0,0,0,5}   // ntifs
#define SECURITY_RESOURCE_MANAGER_AUTHORITY {0,0,0,0,0,9}
#define SECURITY_APP_PACKAGE_AUTHORITY      {0,0,0,0,0,15}
#define SECURITY_MANDATORY_LABEL_AUTHORITY  {0,0,0,0,0,16}
#define SECURITY_SCOPED_POLICY_ID_AUTHORITY {0,0,0,0,0,17}
#define SECURITY_AUTHENTICATION_AUTHORITY   {0,0,0,0,0,18}
#define SECURITY_PROCESS_TRUST_AUTHORITY    {0,0,0,0,0,19}

enum SECURITY_RID : UINT32
{
    SECURITY_NULL_RID = 0x00000000L,
    SECURITY_WORLD_RID = 0x00000000L,
    SECURITY_LOCAL_RID = 0x00000000L,
    SECURITY_LOCAL_LOGON_RID = 0x00000001L,

    SECURITY_CREATOR_OWNER_RID = 0x00000000L,
    SECURITY_CREATOR_GROUP_RID = 0x00000001L,

    SECURITY_CREATOR_OWNER_SERVER_RID = 0x00000002L,
    SECURITY_CREATOR_GROUP_SERVER_RID = 0x00000003L,

    SECURITY_CREATOR_OWNER_RIGHTS_RID = 0x00000004L,


    SECURITY_DIALUP_RID = 0x00000001L,
    SECURITY_NETWORK_RID = 0x00000002L,
    SECURITY_BATCH_RID = 0x00000003L,
    SECURITY_INTERACTIVE_RID = 0x00000004L,
    SECURITY_LOGON_IDS_RID = 0x00000005L,
    SECURITY_LOGON_IDS_RID_COUNT = 3L,
    SECURITY_SERVICE_RID = 0x00000006L,
    SECURITY_ANONYMOUS_LOGON_RID = 0x00000007L,
    SECURITY_PROXY_RID = 0x00000008L,
    SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x00000009L,
    SECURITY_SERVER_LOGON_RID = SECURITY_ENTERPRISE_CONTROLLERS_RID,
    SECURITY_PRINCIPAL_SELF_RID = 0x0000000AL,
    SECURITY_AUTHENTICATED_USER_RID = 0x0000000BL,
    SECURITY_RESTRICTED_CODE_RID = 0x0000000CL,
    SECURITY_TERMINAL_SERVER_RID = 0x0000000DL,
    SECURITY_REMOTE_LOGON_RID = 0x0000000EL,
    SECURITY_THIS_ORGANIZATION_RID = 0x0000000FL,
    SECURITY_IUSER_RID = 0x00000011L,
    SECURITY_LOCAL_SYSTEM_RID = 0x00000012L,
    SECURITY_LOCAL_SERVICE_RID = 0x00000013L,
    SECURITY_NETWORK_SERVICE_RID = 0x00000014L,

    SECURITY_NT_NON_UNIQUE = 0x00000015L,
    SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3L,

    SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = 0x00000016L,

    SECURITY_BUILTIN_DOMAIN_RID = 0x00000020L,
    SECURITY_WRITE_RESTRICTED_CODE_RID = 0x00000021L,


    SECURITY_PACKAGE_BASE_RID = 0x00000040L,
    SECURITY_PACKAGE_RID_COUNT = 2L,
    SECURITY_PACKAGE_NTLM_RID = 0x0000000AL,
    SECURITY_PACKAGE_SCHANNEL_RID = 0x0000000EL,
    SECURITY_PACKAGE_DIGEST_RID = 0x00000015L,

    SECURITY_CRED_TYPE_BASE_RID = 0x00000041L,
    SECURITY_CRED_TYPE_RID_COUNT = 2L,
    SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = 0x00000001L,

    SECURITY_MIN_BASE_RID = 0x00000050L,

    SECURITY_SERVICE_ID_BASE_RID = 0x00000050L,
    SECURITY_SERVICE_ID_RID_COUNT = 6L,

    SECURITY_RESERVED_ID_BASE_RID = 0x00000051L,

    SECURITY_APPPOOL_ID_BASE_RID = 0x00000052L,
    SECURITY_APPPOOL_ID_RID_COUNT = 6L,

    SECURITY_VIRTUALSERVER_ID_BASE_RID = 0x00000053L,
    SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6L,

    SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = 0x00000054L,
    SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6L,

    SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = 0x00000055L,
    SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6L,

    SECURITY_WMIHOST_ID_BASE_RID = 0x00000056L,
    SECURITY_WMIHOST_ID_RID_COUNT = 6L,

    SECURITY_TASK_ID_BASE_RID = 0x00000057L,

    SECURITY_NFS_ID_BASE_RID = 0x00000058L,

    SECURITY_COM_ID_BASE_RID = 0x00000059L,

    SECURITY_WINDOW_MANAGER_BASE_RID = 0x0000005AL,

    SECURITY_RDV_GFX_BASE_RID = 0x0000005BL,

    SECURITY_DASHOST_ID_BASE_RID = 0x0000005CL,
    SECURITY_DASHOST_ID_RID_COUNT = 6L,

    SECURITY_USERMANAGER_ID_BASE_RID = 0x0000005DL,
    SECURITY_USERMANAGER_ID_RID_COUNT = 6L,

    SECURITY_WINRM_ID_BASE_RID = 0x0000005EL,
    SECURITY_WINRM_ID_RID_COUNT = 6L,

    SECURITY_CCG_ID_BASE_RID = 0x0000005FL,

    SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6L,

    SECURITY_MAX_BASE_RID = 0x0000006FL,
    SECURITY_MAX_ALWAYS_FILTERED = 0x000003E7L,
    SECURITY_MIN_NEVER_FILTERED = 0x000003E8L,

    SECURITY_OTHER_ORGANIZATION_RID = 0x000003E8L,

    //
    //Service SID type RIDs are in the range 0x50- 0x6F.  Therefore, we are giving  the next available RID to Windows Mobile team.
    //
    SECURITY_WINDOWSMOBILE_ID_BASE_RID = 0x00000070L,

    //
    // Installer Capability Group Sid related. Currently Base RID is same as LOCAL DOMAIN.
    //
    SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = 0x20,
    SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = 9,

    // Note: This is because the App Capability Rid is S-1-15-3-1024-...
    //       whereas the service group rid is          S-1-5-32-...
    //	The number of RIDs from hash (8) are the same for both
    SECURITY_INSTALLER_CAPABILITY_RID_COUNT = 10,

    //
    //Well-known group for local accounts
    //
    SECURITY_LOCAL_ACCOUNT_RID = 0x00000071L,
    SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = 0x00000072L,
};

enum DOMAIN_GROUP_RID : UINT32
{
    DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = 0x000001F0L,
    DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = 0x000001F1L,
    DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = 0x000001F2L,

    DOMAIN_GROUP_RID_ADMINS = 0x00000200L,
    DOMAIN_GROUP_RID_USERS = 0x00000201L,
    DOMAIN_GROUP_RID_GUESTS = 0x00000202L,
    DOMAIN_GROUP_RID_COMPUTERS = 0x00000203L,
    DOMAIN_GROUP_RID_CONTROLLERS = 0x00000204L,
    DOMAIN_GROUP_RID_CERT_ADMINS = 0x00000205L,
    DOMAIN_GROUP_RID_SCHEMA_ADMINS = 0x00000206L,
    DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 0x00000207L,
    DOMAIN_GROUP_RID_POLICY_ADMINS = 0x00000208L,
    DOMAIN_GROUP_RID_READONLY_CONTROLLERS = 0x00000209L,
    DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = 0x0000020AL,
    DOMAIN_GROUP_RID_CDC_RESERVED = 0x0000020CL,
    DOMAIN_GROUP_RID_PROTECTED_USERS = 0x0000020DL,
    DOMAIN_GROUP_RID_KEY_ADMINS = 0x0000020EL,
    DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = 0x0000020FL,
};

enum DOMAIN_USER_RID : UINT32
{
    DOMAIN_USER_RID_ADMIN = 0x000001F4L,
    DOMAIN_USER_RID_GUEST = 0x000001F5L,
    DOMAIN_USER_RID_KRBTGT = 0x000001F6L,
    DOMAIN_USER_RID_DEFAULT_ACCOUNT = 0x000001F7L,

    DOMAIN_USER_RID_MAX = 0x000003E7L,
};

enum DOMAIN_ALIAS_RID : UINT32
{
    DOMAIN_ALIAS_RID_ADMINS = 0x00000220L,
    DOMAIN_ALIAS_RID_USERS = 0x00000221L,
    DOMAIN_ALIAS_RID_GUESTS = 0x00000222L,
    DOMAIN_ALIAS_RID_POWER_USERS = 0x00000223L,

    DOMAIN_ALIAS_RID_ACCOUNT_OPS = 0x00000224L,
    DOMAIN_ALIAS_RID_SYSTEM_OPS = 0x00000225L,
    DOMAIN_ALIAS_RID_PRINT_OPS = 0x00000226L,
    DOMAIN_ALIAS_RID_BACKUP_OPS = 0x00000227L,

    DOMAIN_ALIAS_RID_REPLICATOR = 0x00000228L,
    DOMAIN_ALIAS_RID_RAS_SERVERS = 0x00000229L,
    DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 0x0000022AL,
    DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = 0x0000022BL,
    DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = 0x0000022CL,
    DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 0x0000022DL,

    DOMAIN_ALIAS_RID_MONITORING_USERS = 0x0000022EL,
    DOMAIN_ALIAS_RID_LOGGING_USERS = 0x0000022FL,
    DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = 0x00000230L,
    DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = 0x00000231L,
    DOMAIN_ALIAS_RID_DCOM_USERS = 0x00000232L,
    DOMAIN_ALIAS_RID_IUSERS = 0x00000238L,
    DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = 0x00000239L,
    DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = 0x0000023BL,
    DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = 0x0000023CL,
    DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = 0x0000023DL,
    DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = 0x0000023EL,
    DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = 0x0000023FL,
    DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = 0x00000240L,
    DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = 0x00000241L,
    DOMAIN_ALIAS_RID_HYPER_V_ADMINS = 0x00000242L,
    DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = 0x00000243L,
    DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = 0x00000244L,
    DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = 0x00000245L,
    DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = 0x00000246L,
};

typedef struct _SID_IDENTIFIER_AUTHORITY
{
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;

typedef struct _SID
{
    BYTE  Revision;
    BYTE  SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    UINT32 SubAuthority[ANYSIZE_ARRAY];
} SID, *PSID, *PISID;

typedef struct _SID_AND_ATTRIBUTES {
    PISID Sid;
    UINT32 Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;

typedef struct _SECURITY_CAPABILITIES {
    PISID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    UINT32 CapabilityCount;
    UINT32 Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;

// This is the *current* ACL revision

enum ACL_REVISION_VALUE : BYTE
{
    ACL_REVISION1       = 1,
    ACL_REVISION        = 2,
    MIN_ACL_REVISION    = ACL_REVISION,
    ACL_REVISION3       = 3,
    ACL_REVISION_DS     = 4,
    MAX_ACL_REVISION    = ACL_REVISION_DS,
};

typedef struct _ACL {
    BYTE    AclRevision;
    BYTE    Sbz1;
    UINT16  AclSize;
    UINT16  AceCount;
    UINT16  Sbz2;
} ACL, *PACL;

enum SECURITY_DESCRIPTOR_CONTROL : UINT16
{
    SE_OWNER_DEFAULTED = 0x0001,
    SE_GROUP_DEFAULTED = 0x0002,
    SE_DACL_PRESENT = 0x0004,
    SE_DACL_DEFAULTED = 0x0008,
    SE_SACL_PRESENT = 0x0010,
    SE_SACL_DEFAULTED = 0x0020,
    SE_DACL_AUTO_INHERIT_REQ = 0x0100,
    SE_SACL_AUTO_INHERIT_REQ = 0x0200,
    SE_DACL_AUTO_INHERITED = 0x0400,
    SE_SACL_AUTO_INHERITED = 0x0800,
    SE_DACL_PROTECTED = 0x1000,
    SE_SACL_PROTECTED = 0x2000,
    SE_RM_CONTROL_VALID = 0x4000,
    SE_SELF_RELATIVE = 0x8000,
};

enum SECURITY_DESCRIPTOR_REVISION_VALUE : UINT8
{
    SECURITY_DESCRIPTOR_REVISION1   = 1,
    SECURITY_DESCRIPTOR_REVISION    = 1,
};

typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    UINT32 Owner;
    UINT32 Group;
    UINT32 Sacl;
    UINT32 Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

#define SECURITY_DESCRIPTOR_MIN_LENGTH   (sizeof(SECURITY_DESCRIPTOR))

enum ACCESS_MODE : UINT32
{
    NOT_USED_ACCESS = 0,
    GRANT_ACCESS,
    SET_ACCESS,
    DENY_ACCESS,
    REVOKE_ACCESS,
    SET_AUDIT_SUCCESS,
    SET_AUDIT_FAILURE
};

enum INHERITANCE_FLAGS : UINT32
{
    NO_INHERITANCE = 0x0,
    SUB_OBJECTS_ONLY_INHERIT = 0x1,
    SUB_CONTAINERS_ONLY_INHERIT = 0x2,
    SUB_CONTAINERS_AND_OBJECTS_INHERIT = 0x3,
    INHERIT_NO_PROPAGATE = 0x4,
    INHERIT_ONLY = 0x8,
};

enum MULTIPLE_TRUSTEE_OPERATION : UINT32
{
    NO_MULTIPLE_TRUSTEE,
    TRUSTEE_IS_IMPERSONATE,
};

enum TRUSTEE_FORM : UINT32
{
    TRUSTEE_IS_SID,
    TRUSTEE_IS_NAME,
    TRUSTEE_BAD_FORM,
    TRUSTEE_IS_OBJECTS_AND_SID,
    TRUSTEE_IS_OBJECTS_AND_NAME
};

enum TRUSTEE_TYPE : UINT32
{
    TRUSTEE_IS_UNKNOWN,
    TRUSTEE_IS_USER,
    TRUSTEE_IS_GROUP,
    TRUSTEE_IS_DOMAIN,
    TRUSTEE_IS_ALIAS,
    TRUSTEE_IS_WELL_KNOWN_GROUP,
    TRUSTEE_IS_DELETED,
    TRUSTEE_IS_INVALID,
    TRUSTEE_IS_COMPUTER
};

enum SE_OBJECT_TYPE : UINT32
{
    SE_UNKNOWN_OBJECT_TYPE = 0,
    SE_FILE_OBJECT,
    SE_SERVICE,
    SE_PRINTER,
    SE_REGISTRY_KEY,
    SE_LMSHARE,
    SE_KERNEL_OBJECT,
    SE_WINDOW_OBJECT,
    SE_DS_OBJECT,
    SE_DS_OBJECT_ALL,
    SE_PROVIDER_DEFINED_OBJECT,
    SE_WMIGUID_OBJECT,
    SE_REGISTRY_WOW64_32KEY,
    SE_REGISTRY_WOW64_64KEY,
};

typedef struct  _OBJECTS_AND_SID
{
    UINT32  ObjectsPresent;
    GUID    ObjectTypeGuid;
    GUID    InheritedObjectTypeGuid;
    SID     * pSid;
} OBJECTS_AND_SID, *POBJECTS_AND_SID;

typedef struct  _OBJECTS_AND_NAME_A
{
    UINT32         ObjectsPresent;
    SE_OBJECT_TYPE ObjectType;
    PSTR    ObjectTypeName;
    PSTR    InheritedObjectTypeName;
    PSTR    ptstrName;
} OBJECTS_AND_NAME_A, *POBJECTS_AND_NAME_A;

typedef struct  _OBJECTS_AND_NAME_W
{
    UINT32         ObjectsPresent;
    SE_OBJECT_TYPE ObjectType;
    PWSTR   ObjectTypeName;
    PWSTR   InheritedObjectTypeName;
    PWSTR   ptstrName;
} OBJECTS_AND_NAME_W, *POBJECTS_AND_NAME_W;

typedef struct _TRUSTEEA
{
    struct _TRUSTEEA           *pMultipleTrustee;
    MULTIPLE_TRUSTEE_OPERATION  MultipleTrusteeOperation;
    TRUSTEE_FORM                TrusteeForm;
    TRUSTEE_TYPE                TrusteeType;

    union
    {
        // [case(TRUSTEE_IS_NAME)]
        PSTR                  ptstrName;
        // [case(TRUSTEE_IS_SID)]
        SID                    *pSid;
        // [case(TRUSTEE_IS_OBJECTS_AND_SID)]
        OBJECTS_AND_SID        *pObjectsAndSid;
        // [case(TRUSTEE_IS_OBJECTS_AND_NAME)]
        OBJECTS_AND_NAME_A     *pObjectsAndName;
    } DUMMYUNIONNAME;
}TRUSTEEA, *PTRUSTEEA;

typedef struct _TRUSTEEW
{
    struct _TRUSTEEW           *pMultipleTrustee;
    MULTIPLE_TRUSTEE_OPERATION  MultipleTrusteeOperation;
    TRUSTEE_FORM                TrusteeForm;
    TRUSTEE_TYPE                TrusteeType;

    union
    {
        // [case(TRUSTEE_IS_NAME)]
        PWSTR                  ptstrName;
        // [case(TRUSTEE_IS_SID)]
        SID                    *pSid;
        // [case(TRUSTEE_IS_OBJECTS_AND_SID)]
        OBJECTS_AND_SID        *pObjectsAndSid;
        // [case(TRUSTEE_IS_OBJECTS_AND_NAME)]
        OBJECTS_AND_NAME_W     *pObjectsAndName;
    } DUMMYUNIONNAME;
}TRUSTEEW, *PTRUSTEEW;

typedef struct _EXPLICIT_ACCESSA
{
    UINT32        grfAccessPermissions;
    ACCESS_MODE   grfAccessMode;
    UINT32        grfInheritance;
    TRUSTEEA      Trustee;
}EXPLICIT_ACCESSA, *PEXPLICIT_ACCESSA;

typedef struct _EXPLICIT_ACCESSW
{
    UINT32        grfAccessPermissions;
    ACCESS_MODE   grfAccessMode;
    UINT32        grfInheritance;
    TRUSTEEW      Trustee;
}EXPLICIT_ACCESSW, *PEXPLICIT_ACCESSW;

//////////////////////////////////////////////////////////////////////////

enum NT_SECURITY_PRIVILEGES : UINT32
{
    SE_MIN_WELL_KNOWN_PRIVILEGE = 2L,
    SE_CREATE_TOKEN_PRIVILEGE = 2L,
    SE_ASSIGNPRIMARYTOKEN_PRIVILEGE = 3L,
    SE_LOCK_MEMORY_PRIVILEGE = 4L,
    SE_INCREASE_QUOTA_PRIVILEGE = 5L,
    SE_MACHINE_ACCOUNT_PRIVILEGE = 6L,
    SE_TCB_PRIVILEGE = 7L,
    SE_SECURITY_PRIVILEGE = 8L,
    SE_TAKE_OWNERSHIP_PRIVILEGE = 9L,
    SE_LOAD_DRIVER_PRIVILEGE = 10L,
    SE_SYSTEM_PROFILE_PRIVILEGE = 11L,
    SE_SYSTEMTIME_PRIVILEGE = 12L,
    SE_PROF_SINGLE_PROCESS_PRIVILEGE = 13L,
    SE_INC_BASE_PRIORITY_PRIVILEGE = 14L,
    SE_CREATE_PAGEFILE_PRIVILEGE = 15L,
    SE_CREATE_PERMANENT_PRIVILEGE = 16L,
    SE_BACKUP_PRIVILEGE = 17L,
    SE_RESTORE_PRIVILEGE = 18L,
    SE_SHUTDOWN_PRIVILEGE = 19L,
    SE_DEBUG_PRIVILEGE = 20L,
    SE_AUDIT_PRIVILEGE = 21L,
    SE_SYSTEM_ENVIRONMENT_PRIVILEGE = 22L,
    SE_CHANGE_NOTIFY_PRIVILEGE = 23L,
    SE_REMOTE_SHUTDOWN_PRIVILEGE = 24L,
    SE_UNDOCK_PRIVILEGE = 25L,
    SE_SYNC_AGENT_PRIVILEGE = 26L,
    SE_ENABLE_DELEGATION_PRIVILEGE = 27L,
    SE_MANAGE_VOLUME_PRIVILEGE = 28L,
    SE_IMPERSONATE_PRIVILEGE = 29L,
    SE_CREATE_GLOBAL_PRIVILEGE = 30L,
    SE_TRUSTED_CREDMAN_ACCESS_PRIVILEGE = 31L,
    SE_RELABEL_PRIVILEGE = 32L,
    SE_INC_WORKING_SET_PRIVILEGE = 33L,
    SE_TIME_ZONE_PRIVILEGE = 34L,
    SE_CREATE_SYMBOLIC_LINK_PRIVILEGE = 35L,
    SE_DELEGATE_SESSION_USER_IMPERSONATE_PRIVILEGE = 36L,
    SE_MAX_WELL_KNOWN_PRIVILEGE = SE_DELEGATE_SESSION_USER_IMPERSONATE_PRIVILEGE,
};

//////////////////////////////////////////////////////////////////////////

enum TOKEN_INFORMATION_CLASS : UINT32
{
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    TokenSingletonAttributes,
    MaxTokenInfoClass  // MaxTokenInfoClass should always be the last enum
};

extern"C" NTSTATUS NtQueryInformationToken(
    HANDLE TokenHandle,
    TOKEN_INFORMATION_CLASS TokenInformationClass,
    void* TokenInformation,
    UINT32 TokenInformationLength,
    UINT32* ReturnLength
);